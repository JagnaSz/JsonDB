
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 09 17:48:31 CEST 2015
//----------------------------------------------------

package kompilatory.parser;

import java_cup.runtime.*;

import java.util.ArrayList;
import java.util.List;

import kompilatory.parser.JSONPair;
import kompilatory.parser.JSONValue;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 09 17:48:31 CEST 2015
  */
public class JSONParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public JSONParser() {super();}

  /** Constructor which sets the default scanner. */
  public JSONParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JSONParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\005\003\000\002\002\004\000\002\003" +
    "\005\000\002\007\003\000\002\007\005\000\002\006\005" +
    "\000\002\004\005\000\002\010\003\000\002\010\005\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\032\000\004\004\005\001\002\000\004\002\001\001" +
    "\002\000\004\017\011\001\002\000\004\002\007\001\002" +
    "\000\004\002\000\001\002\000\006\005\033\013\032\001" +
    "\002\000\004\012\013\001\002\000\006\005\ufffe\013\ufffe" +
    "\001\002\000\020\004\005\010\022\014\015\015\014\016" +
    "\020\017\024\020\017\001\002\000\010\005\ufff8\011\ufff8" +
    "\013\ufff8\001\002\000\010\005\ufff4\011\ufff4\013\ufff4\001" +
    "\002\000\010\005\ufff2\011\ufff2\013\ufff2\001\002\000\010" +
    "\005\ufff7\011\ufff7\013\ufff7\001\002\000\010\005\ufff6\011" +
    "\ufff6\013\ufff6\001\002\000\010\005\ufff3\011\ufff3\013\ufff3" +
    "\001\002\000\020\004\005\010\022\014\015\015\014\016" +
    "\020\017\024\020\017\001\002\000\006\005\ufffc\013\ufffc" +
    "\001\002\000\010\005\ufff5\011\ufff5\013\ufff5\001\002\000" +
    "\006\011\030\013\027\001\002\000\006\011\ufffa\013\ufffa" +
    "\001\002\000\020\004\005\010\022\014\015\015\014\016" +
    "\020\017\024\020\017\001\002\000\010\005\ufffb\011\ufffb" +
    "\013\ufffb\001\002\000\006\011\ufff9\013\ufff9\001\002\000" +
    "\004\017\011\001\002\000\012\002\uffff\005\uffff\011\uffff" +
    "\013\uffff\001\002\000\006\005\ufffd\013\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\032\000\006\003\003\005\005\001\001\000\002\001" +
    "\001\000\006\006\011\007\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\022\003\015\004\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\002\025\003\015\004\020\010\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\030\003\015\004\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\033\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JSONParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JSONParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JSONParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$JSONParser$actions {
  private final JSONParser parser;

  /** Constructor */
  CUP$JSONParser$actions(JSONParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$JSONParser$do_action(
    int                        CUP$JSONParser$act_num,
    java_cup.runtime.lr_parser CUP$JSONParser$parser,
    java.util.Stack            CUP$JSONParser$stack,
    int                        CUP$JSONParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JSONParser$result;

      /* select the action based on the action number */
      switch (CUP$JSONParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // value ::= object 
            {
              JSONValue RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		JSONObject o = (JSONObject)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 RESULT = new JSONValue(o); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("value",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // value ::= array 
            {
              JSONValue RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		JSONArray a = (JSONArray)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 RESULT = new JSONValue(a); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("value",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // value ::= BOOLEAN 
            {
              JSONValue RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 RESULT =  new JSONValue(Boolean.valueOf(b)); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("value",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // value ::= WORD 
            {
              JSONValue RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 RESULT =  new JSONValue(w); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("value",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // value ::= DOUBLE 
            {
              JSONValue RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 RESULT =  new JSONValue(Double.valueOf(d)); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("value",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // value ::= NULL 
            {
              JSONValue RESULT =null;
		 RESULT = new JSONValue("null"); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("value",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // value ::= INTEGER 
            {
              JSONValue RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 RESULT = new JSONValue(Integer.valueOf(i)); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("value",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // elements ::= elements COMA value 
            {
              List<JSONValue> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).right;
		List<JSONValue> e = (List<JSONValue>)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		JSONValue v = (JSONValue)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 RESULT = add(e, v); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("elements",6, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // elements ::= value 
            {
              List<JSONValue> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		JSONValue v = (JSONValue)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 RESULT = add(new ArrayList<JSONValue>(), v); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("elements",6, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // array ::= LEFT_SQ_BRACKET elements RIGHT_SQ_BRACKET 
            {
              JSONArray RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		List<JSONValue> e = (List<JSONValue>)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		 RESULT = new JSONArray(e); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("array",2, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // pair ::= WORD COLON value 
            {
              JSONPair RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		JSONValue v = (JSONValue)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 RESULT = new JSONPair(w, v); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("pair",4, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // members ::= members COMA pair 
            {
              List<JSONPair> RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).right;
		List<JSONPair> m = (List<JSONPair>)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		JSONPair p = (JSONPair)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 RESULT = add(m, p); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("members",5, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // members ::= pair 
            {
              List<JSONPair> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		JSONPair p = (JSONPair)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 RESULT = add(new ArrayList<JSONPair>(), p); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("members",5, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // object ::= LEFT_BRACKET members RIGHT_BRACKET 
            {
              JSONObject RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		List<JSONPair> m = (List<JSONPair>)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		 RESULT = new JSONObject(m); 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("object",1, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= top EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		JSONObject start_val = (JSONObject)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		RESULT = start_val;
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JSONParser$parser.done_parsing();
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // top ::= object 
            {
              JSONObject RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()).right;
		JSONObject o = (JSONObject)((java_cup.runtime.Symbol) CUP$JSONParser$stack.peek()).value;
		 RESULT = o; 
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("top",3, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
  private ArrayList<JSONPair> add(List<JSONPair> m, JSONPair pair){
		m.add(pair);
		return (ArrayList<JSONPair>) m;
	}



	private ArrayList<JSONValue> add(List<JSONValue> list, JSONValue value) {
		list.add(value);
		return (ArrayList<JSONValue>) list;
	}
}

