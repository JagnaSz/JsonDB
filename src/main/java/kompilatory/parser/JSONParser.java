
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 09 09:49:26 CEST 2015
//----------------------------------------------------

package kompilatory.parser;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 09 09:49:26 CEST 2015
  */
public class JSONParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public JSONParser() {super();}

  /** Constructor which sets the default scanner. */
  public JSONParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public JSONParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\011\000\002\002\011\000\002\002\004\000\002\002" +
    "\007\000\002\002\007\000\002\002\007\000\002\002\007" +
    "\000\002\002\007\000\002\002\007\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\030\000\004\004\005\001\002\000\004\002\032\001" +
    "\002\000\004\017\006\001\002\000\004\012\007\001\002" +
    "\000\016\010\013\014\015\015\010\016\012\017\011\020" +
    "\014\001\002\000\004\005\031\001\002\000\006\005\026" +
    "\013\025\001\002\000\004\005\024\001\002\000\004\004" +
    "\005\001\002\000\004\005\021\001\002\000\004\005\020" +
    "\001\002\000\004\005\017\001\002\000\010\002\ufffa\005" +
    "\ufffa\011\ufffa\001\002\000\010\002\ufffc\005\ufffc\011\ufffc" +
    "\001\002\000\010\002\ufffb\005\ufffb\011\ufffb\001\002\000" +
    "\004\011\023\001\002\000\004\005\ufff9\001\002\000\010" +
    "\002\ufffd\005\ufffd\011\ufffd\001\002\000\004\004\005\001" +
    "\002\000\010\002\uffff\005\uffff\011\uffff\001\002\000\004" +
    "\005\030\001\002\000\010\002\001\005\001\011\001\001" +
    "\002\000\010\002\ufffe\005\ufffe\011\ufffe\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\030\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\002\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$JSONParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$JSONParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$JSONParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$JSONParser$actions {
  private final JSONParser parser;

  /** Constructor */
  CUP$JSONParser$actions(JSONParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$JSONParser$do_action(
    int                        CUP$JSONParser$act_num,
    java_cup.runtime.lr_parser CUP$JSONParser$parser,
    java.util.Stack            CUP$JSONParser$stack,
    int                        CUP$JSONParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$JSONParser$result;

      /* select the action based on the action number */
      switch (CUP$JSONParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // array ::= LEFT_SQ_BRACKET object RIGHT_SQ_BRACKET 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		 System.out.println("[ " + o + " ]");
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("array",1, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-2)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // object ::= LEFT_BRACKET WORD COLON array RIGHT_BRACKET 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		 System.out.println("{" + w + " : " + a + "}");
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("object",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // object ::= LEFT_BRACKET WORD COLON NULL RIGHT_BRACKET 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).value;
		 System.out.println("{" + w+ " : null }");
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("object",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // object ::= LEFT_BRACKET WORD COLON BOOLEAN RIGHT_BRACKET 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		 System.out.println("{" + w+ " : " + b + "}");
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("object",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // object ::= LEFT_BRACKET WORD COLON DOUBLE RIGHT_BRACKET 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		 System.out.println("{" + w+ " : " + d + "}");
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("object",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // object ::= LEFT_BRACKET WORD COLON INTEGER RIGHT_BRACKET 
            {
              String RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).right;
		String w = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		 System.out.println("{" + w+ " : " + i + "}");
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("object",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // object ::= LEFT_BRACKET WORD COLON WORD RIGHT_BRACKET 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		String w2 = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		 System.out.println("{" + w1+ " : " + w2 + "}");
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("object",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-4)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= object EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		RESULT = start_val;
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$JSONParser$parser.done_parsing();
          return CUP$JSONParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // object ::= LEFT_BRACKET WORD COLON WORD COMA object RIGHT_BRACKET 
            {
              String RESULT =null;
		int w1left = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-5)).left;
		int w1right = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-5)).right;
		String w1 = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-5)).value;
		int w2left = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).left;
		int w2right = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).right;
		String w2 = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-1)).value;
		 System.out.println("{" + w1+ " : " + w2 + "," + o + "}");
              CUP$JSONParser$result = parser.getSymbolFactory().newSymbol("object",0, ((java_cup.runtime.Symbol)CUP$JSONParser$stack.elementAt(CUP$JSONParser$top-6)), ((java_cup.runtime.Symbol)CUP$JSONParser$stack.peek()), RESULT);
            }
          return CUP$JSONParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

